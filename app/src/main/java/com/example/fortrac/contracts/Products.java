package com.example.fortrac.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class Products extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50611b76806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063af61c6a61161005b578063af61c6a614610112578063c29b2f2014610142578063f429520514610160578063f4c84d191461017c5761007d565b8063054961551461008257806358a40cc4146100b257806368111cce146100e2575b600080fd5b61009c60048036038101906100979190610db3565b6101ac565b6040516100a99190610fe7565b60405180910390f35b6100cc60048036038101906100c79190611035565b61031b565b6040516100d991906110ac565b60405180910390f35b6100fc60048036038101906100f79190610db3565b610522565b604051610109919061111e565b60405180910390f35b61012c60048036038101906101279190610db3565b6106d4565b60405161013991906111ef565b60405180910390f35b61014a610780565b60405161015791906112d3565b60405180910390f35b61017a600480360381019061017591906113e9565b610859565b005b61019660048036038101906101919190611490565b6109c0565b6040516101a391906110ac565b60405180910390f35b60606000826040516101be9190611544565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b8282101561031057838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546102759061158a565b80601f01602080910402602001604051908101604052809291908181526020018280546102a19061158a565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b50505050508152602001600282015481525050815260200190600101906101ec565b505050509050919050565b6000808360405161032c9190611544565b908152602001604051809103902080549050821115610380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037790611618565b60405180910390fd5b6000826000856040516103939190611544565b9081526020016040518091039020805490506103af9190611667565b90505b6000846040516103c29190611544565b908152602001604051809103902080549050811015610517576000846040516103eb9190611544565b9081526020016040518091039020818154811061040b5761040a61169b565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166001856040516104639190611544565b908152602001604051809103902082815481106104835761048261169b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fb90611716565b60405180910390fd5b808061050f90611736565b9150506103b2565b506001905092915050565b61052a610b7b565b60028260405161053a9190611544565b90815260200160405180910390206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546105b99061158a565b80601f01602080910402602001604051908101604052809291908181526020018280546105e59061158a565b80156106325780601f1061060757610100808354040283529160200191610632565b820191906000526020600020905b81548152906001019060200180831161061557829003601f168201915b5050505050815260200160028201805461064b9061158a565b80601f01602080910402602001604051908101604052809291908181526020018280546106779061158a565b80156106c45780601f10610699576101008083540402835291602001916106c4565b820191906000526020600020905b8154815290600101906020018083116106a757829003601f168201915b5050505050815250509050919050565b60606001826040516106e69190611544565b908152602001604051809103902080548060200260200160405190810160405280929190818152602001828054801561077457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161072a575b50505050509050919050565b60606003805480602002602001604051908101604052809291908181526020016000905b828210156108505783829060005260206000200180546107c39061158a565b80601f01602080910402602001604051908101604052809291908181526020018280546107ef9061158a565b801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b5050505050815260200190600101906107a4565b50505050905090565b600060028460405161086b9190611544565b908152602001604051809103902060020180546108879061158a565b9050146108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c0906117ca565b60405180910390fd5b6003839080600181540180825580915050600190039060005260206000200160009091909190915090816108fd9190611996565b5060006002846040516109109190611544565b90815260200160405180910390209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160010190816109749190611996565b50828160020190816109869190611996565b50816001856040516109989190611544565b908152602001604051809103902090805190602001906109b9929190610bb2565b5050505050565b60006001836040516109d29190611544565b9081526020016040518091039020805490506000846040516109f49190611544565b90815260200160405180910390208054905003610a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3d90611ab4565b60405180910390fd5b600083604051610a569190611544565b908152602001604051809103902060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200142815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610b1a9190611996565b50604082015181600201555050610b3283600161031b565b610b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6890611b20565b60405180910390fd5b6001905092915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b828054828255906000526020600020908101928215610c2b579160200282015b82811115610c2a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bd2565b5b509050610c389190610c3c565b5090565b5b80821115610c55576000816000905550600101610c3d565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cc082610c77565b810181811067ffffffffffffffff82111715610cdf57610cde610c88565b5b80604052505050565b6000610cf2610c59565b9050610cfe8282610cb7565b919050565b600067ffffffffffffffff821115610d1e57610d1d610c88565b5b610d2782610c77565b9050602081019050919050565b82818337600083830152505050565b6000610d56610d5184610d03565b610ce8565b905082815260208101848484011115610d7257610d71610c72565b5b610d7d848285610d34565b509392505050565b600082601f830112610d9a57610d99610c6d565b5b8135610daa848260208601610d43565b91505092915050565b600060208284031215610dc957610dc8610c63565b5b600082013567ffffffffffffffff811115610de757610de6610c68565b5b610df384828501610d85565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5382610e28565b9050919050565b610e6381610e48565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ea3578082015181840152602081019050610e88565b60008484015250505050565b6000610eba82610e69565b610ec48185610e74565b9350610ed4818560208601610e85565b610edd81610c77565b840191505092915050565b6000819050919050565b610efb81610ee8565b82525050565b6000606083016000830151610f196000860182610e5a565b5060208301518482036020860152610f318282610eaf565b9150506040830151610f466040860182610ef2565b508091505092915050565b6000610f5d8383610f01565b905092915050565b6000602082019050919050565b6000610f7d82610dfc565b610f878185610e07565b935083602082028501610f9985610e18565b8060005b85811015610fd55784840389528151610fb68582610f51565b9450610fc183610f65565b925060208a01995050600181019050610f9d565b50829750879550505050505092915050565b600060208201905081810360008301526110018184610f72565b905092915050565b61101281610ee8565b811461101d57600080fd5b50565b60008135905061102f81611009565b92915050565b6000806040838503121561104c5761104b610c63565b5b600083013567ffffffffffffffff81111561106a57611069610c68565b5b61107685828601610d85565b925050602061108785828601611020565b9150509250929050565b60008115159050919050565b6110a681611091565b82525050565b60006020820190506110c1600083018461109d565b92915050565b60006060830160008301516110df6000860182610e5a565b50602083015184820360208601526110f78282610eaf565b915050604083015184820360408601526111118282610eaf565b9150508091505092915050565b6000602082019050818103600083015261113881846110c7565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006111788383610e5a565b60208301905092915050565b6000602082019050919050565b600061119c82611140565b6111a6818561114b565b93506111b18361115c565b8060005b838110156111e25781516111c9888261116c565b97506111d483611184565b9250506001810190506111b5565b5085935050505092915050565b600060208201905081810360008301526112098184611191565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006112498383610eaf565b905092915050565b6000602082019050919050565b600061126982611211565b611273818561121c565b9350836020820285016112858561122d565b8060005b858110156112c157848403895281516112a2858261123d565b94506112ad83611251565b925060208a01995050600181019050611289565b50829750879550505050505092915050565b600060208201905081810360008301526112ed818461125e565b905092915050565b600067ffffffffffffffff8211156113105761130f610c88565b5b602082029050602081019050919050565b600080fd5b61132f81610e48565b811461133a57600080fd5b50565b60008135905061134c81611326565b92915050565b6000611365611360846112f5565b610ce8565b9050808382526020820190506020840283018581111561138857611387611321565b5b835b818110156113b1578061139d888261133d565b84526020840193505060208101905061138a565b5050509392505050565b600082601f8301126113d0576113cf610c6d565b5b81356113e0848260208601611352565b91505092915050565b60008060006060848603121561140257611401610c63565b5b600084013567ffffffffffffffff8111156114205761141f610c68565b5b61142c86828701610d85565b935050602084013567ffffffffffffffff81111561144d5761144c610c68565b5b61145986828701610d85565b925050604084013567ffffffffffffffff81111561147a57611479610c68565b5b611486868287016113bb565b9150509250925092565b600080604083850312156114a7576114a6610c63565b5b600083013567ffffffffffffffff8111156114c5576114c4610c68565b5b6114d185828601610d85565b925050602083013567ffffffffffffffff8111156114f2576114f1610c68565b5b6114fe85828601610d85565b9150509250929050565b600081905092915050565b600061151e82610e69565b6115288185611508565b9350611538818560208601610e85565b80840191505092915050565b60006115508284611513565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806115a257607f821691505b6020821081036115b5576115b461155b565b5b50919050565b600082825260208201905092915050565b7f444550544820495320444545504552205448454e204c454e4754480000000000600082015250565b6000611602601b836115bb565b915061160d826115cc565b602082019050919050565b60006020820190508181036000830152611631816115f5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061167282610ee8565b915061167d83610ee8565b925082820390508181111561169557611694611638565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5041544820444f4553204e4f54204d4154434820545241434500000000000000600082015250565b60006117006019836115bb565b915061170b826116ca565b602082019050919050565b6000602082019050818103600083015261172f816116f3565b9050919050565b600061174182610ee8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361177357611772611638565b5b600182019050919050565b7f43414e4e4f54205245474953544552204558495354494e472054414720494400600082015250565b60006117b4601f836115bb565b91506117bf8261177e565b602082019050919050565b600060208201905081810360008301526117e3816117a7565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261184c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261180f565b611856868361180f565b95508019841693508086168417925050509392505050565b6000819050919050565b600061189361188e61188984610ee8565b61186e565b610ee8565b9050919050565b6000819050919050565b6118ad83611878565b6118c16118b98261189a565b84845461181c565b825550505050565b600090565b6118d66118c9565b6118e18184846118a4565b505050565b5b81811015611905576118fa6000826118ce565b6001810190506118e7565b5050565b601f82111561194a5761191b816117ea565b611924846117ff565b81016020851015611933578190505b61194761193f856117ff565b8301826118e6565b50505b505050565b600082821c905092915050565b600061196d6000198460080261194f565b1980831691505092915050565b6000611986838361195c565b9150826002028217905092915050565b61199f82610e69565b67ffffffffffffffff8111156119b8576119b7610c88565b5b6119c2825461158a565b6119cd828285611909565b600060209050601f831160018114611a0057600084156119ee578287015190505b6119f8858261197a565b865550611a60565b601f198416611a0e866117ea565b60005b82811015611a3657848901518255600182019150602085019450602081019050611a11565b86831015611a535784890151611a4f601f89168261195c565b8355505b6001600288020188555050505b505050505050565b7f545241434520495320415420454e440000000000000000000000000000000000600082015250565b6000611a9e600f836115bb565b9150611aa982611a68565b602082019050919050565b60006020820190508181036000830152611acd81611a91565b9050919050565b7f494e56414c494400000000000000000000000000000000000000000000000000600082015250565b6000611b0a6007836115bb565b9150611b1582611ad4565b602082019050919050565b60006020820190508181036000830152611b3981611afd565b905091905056fea2646970667358221220c7bd7caec81039187f58774c2df22e6041dc7cf30d8b841e5377f3897a4a645464736f6c63430008110033";

    public static final String FUNC_ADDPRODUCT = "addProduct";

    public static final String FUNC_VERIFY = "verify";

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_GETPATH = "getPath";

    public static final String FUNC_GETTRACE = "getTrace";

    public static final String FUNC_GETPRODUCT = "getProduct";

    public static final String FUNC_GETPRODUCTS = "getProducts";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1667888645643", "0xC1027f07760Ad9830740b70C26394FA66cF44e4D");
        _addresses.put("1667721265918", "0x96545Ca3B7481fB365752b7578CC6c1A5a8261C0");
        _addresses.put("1667889085777", "0xe80CFe228Af3A45CD1143987aD5476E2ABf134aE");
    }

    @Deprecated
    protected Products(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Products(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Products(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Products(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addProduct(String tid, String data, List<String> path) {
        final Function function = new Function(
                FUNC_ADDPRODUCT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tid), 
                new org.web3j.abi.datatypes.Utf8String(data), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(path, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> verify(String tid, BigInteger depth) {
        final Function function = new Function(FUNC_VERIFY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tid), 
                new org.web3j.abi.datatypes.generated.Uint256(depth)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> update(String tid, String data) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tid), 
                new org.web3j.abi.datatypes.Utf8String(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getPath(String tid) {
        final Function function = new Function(FUNC_GETPATH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getTrace(String tid) {
        final Function function = new Function(FUNC_GETTRACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Event>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Product> getProduct(String tid) {
        final Function function = new Function(FUNC_GETPRODUCT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Product>() {}));
        return executeRemoteCallSingleValueReturn(function, Product.class);
    }

    public RemoteFunctionCall<List> getProducts() {
        final Function function = new Function(FUNC_GETPRODUCTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static Products load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Products(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Products load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Products(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Products load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Products(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Products load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Products(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Products> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Products.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Products> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Products.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Products> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Products.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Products> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Products.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class Event extends DynamicStruct {
        public String actor;

        public String data;

        public BigInteger timestamp;

        public Event(String actor, String data, BigInteger timestamp) {
            super(new org.web3j.abi.datatypes.Address(actor), 
                    new org.web3j.abi.datatypes.Utf8String(data), 
                    new org.web3j.abi.datatypes.generated.Uint256(timestamp));
            this.actor = actor;
            this.data = data;
            this.timestamp = timestamp;
        }

        public Event(Address actor, Utf8String data, Uint256 timestamp) {
            super(actor, data, timestamp);
            this.actor = actor.getValue();
            this.data = data.getValue();
            this.timestamp = timestamp.getValue();
        }
    }

    public static class Product extends DynamicStruct {
        public String owner;

        public String tid;

        public String data;

        public Product(String owner, String tid, String data) {
            super(new org.web3j.abi.datatypes.Address(owner), 
                    new org.web3j.abi.datatypes.Utf8String(tid), 
                    new org.web3j.abi.datatypes.Utf8String(data));
            this.owner = owner;
            this.tid = tid;
            this.data = data;
        }

        public Product(Address owner, Utf8String tid, Utf8String data) {
            super(owner, tid, data);
            this.owner = owner.getValue();
            this.tid = tid.getValue();
            this.data = data.getValue();
        }
    }
}
